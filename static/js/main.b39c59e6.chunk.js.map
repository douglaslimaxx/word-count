{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","wCount","setWCount","_useState5","input","errorMessage","resultMessage","_useState6","classNameInput","setClassNameInput","react_default","a","createElement","className","type","placeholder","onChange","e","target","onClick","number","split","filter","i","length","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"mMA6DeA,MA1Df,WAAe,IAAAC,EACaC,mBAAS,IADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACCI,EADDJ,EAAA,GAAAK,EAGeN,mBAAS,GAHxBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGNE,EAHMD,EAAA,GAGEE,EAHFF,EAAA,GAAAG,EAK+BV,mBAAS,CACnDW,MAAO,YACPC,aAAc,mBACdC,cAAe,sBARJC,EAAAZ,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAKNK,EALMD,EAAA,GAKUE,EALVF,EAAA,GAWb,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,cAGCH,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,SACAC,UAAWL,EAAeJ,MAC1BU,KAAK,OACLC,YAAY,oBACZlB,MAAOA,EACPmB,SAAU,SAAAC,GACRR,EAAkB,CAChBL,MAAO,YACPC,aAAc,mBACdC,cAAe,sBACjBR,EAASmB,EAAEC,OAAOrB,WAEtBa,EAAAC,EAAAC,cAAA,UAAQO,QAAS,WACb,IAAMC,EAASvB,EAAMwB,MAAM,KAAKC,OAAO,SAACC,GAAD,MAAa,KAANA,IAAUC,OAC1C,IAAXJ,GACDX,EAAkB,CAChBL,MAAO,iBACPC,aAAc,mBACdC,cAAe,sBACjBJ,EAAUkB,KAEVX,EAAkB,CAChBL,MAAO,YACPC,aAAc,mBACdC,cAAe,sBACjBJ,EAAUkB,MAbhB,UAiBAV,EAAAC,EAAAC,cAAA,OACAC,UAAWL,EAAeF,eAD1B,sBAEsBL,EAFtB,UAIAS,EAAAC,EAAAC,cAAA,OACAC,UAAWL,EAAeH,cAD1B,yCCvCSoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAX,EAAA,GAAAY,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCHDW,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACH/B,EAAAC,EAAAC,cAACF,EAAAC,EAAM+B,WAAP,KACEhC,EAAAC,EAAAC,cAAC+B,EAAD,QAOJlB","file":"static/js/main.b39c59e6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [value, setValue] = useState(\"\")\n\n  const [wCount, setWCount] = useState(0)\n\n  const [classNameInput, setClassNameInput] = useState({\n    input: \"wordInput\", \n    errorMessage: \"hideMessageError\",\n    resultMessage: \"hideMessageResult\"\n  })\n\n  return (\n    <div className=\"App\">\n      <header className=\"Word Count\">\n        Word Count\n      </header>\n       <div>\n        <input \n        className={classNameInput.input}\n        type=\"text\" \n        placeholder='Put the text here'\n        value={value} \n        onChange={e => {\n          setClassNameInput({\n            input: \"wordInput\", \n            errorMessage: \"hideMessageError\",\n            resultMessage: \"hideMessageResult\"})\n          setValue(e.target.value)}}/>\n       </div>\n      <button onClick={() => {\n          const number = value.split(\" \").filter((i) => i !== \"\").length\n          if(number === 0){\n            setClassNameInput({\n              input: \"wordInputError\", \n              errorMessage: \"showMessageError\", \n              resultMessage: \"hideMessageResult\"})\n            setWCount(number)\n          } else {\n            setClassNameInput({\n              input: \"wordInput\", \n              errorMessage: \"hideMessageError\", \n              resultMessage: \"showMessageResult\"})\n            setWCount(number)\n          }\n          }\n        }>Submit</button>\n      <div\n      className={classNameInput.resultMessage}>\n        This text contains {wCount} words\n      </div>\n      <div\n      className={classNameInput.errorMessage}>\n        No text detected - Text is required\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}